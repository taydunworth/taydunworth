{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg","hello.svg"],"names":["App","className","src","logo","alt","hello","id","href","target","icon","faDribbble","faInstagram","faLinkedinIn","faGithub","faEnvelope","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"wSA8BeA,MAtBf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,uBAE3C,8BACE,yBAAKF,IAAKG,IAAOC,GAAG,gBAAgBF,IAAI,KACxC,wBAAIH,UAAU,WAAd,UACA,uIACA,wBAAIA,UAAU,aACZ,4BAAI,uBAAGM,KAAK,mCAAmCC,OAAO,UAAS,kBAAC,IAAD,CAAiBC,KAAMC,QACtF,4BAAI,uBAAGH,KAAK,2CAA2CC,OAAO,UAAS,kBAAC,IAAD,CAAiBC,KAAME,QAC9F,4BAAI,uBAAGJ,KAAK,sCAAsCC,OAAO,UAAS,kBAAC,IAAD,CAAiBC,KAAMG,QACzF,4BAAI,uBAAGL,KAAK,iCAAiCC,OAAO,UAAS,kBAAC,IAAD,CAAiBC,KAAMI,QACpF,4BAAI,uBAAGN,KAAK,gCAA+B,kBAAC,IAAD,CAAiBE,KAAMK,YCvBxDC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCANC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4G3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,kBEpHnBC,EAAOC,QAAU,IAA0B,kC,kBCA3CD,EAAOC,QAAU,IAA0B,oC","file":"static/js/main.dac94a30.chunk.js","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport hello from './hello.svg';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faDribbble, faInstagram, faLinkedinIn, faGithub } from '@fortawesome/free-brands-svg-icons';\nimport { faEnvelope } from '@fortawesome/free-solid-svg-icons';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"Tay Dunworth logo\" />\n      </header>\n      <main>\n        <img src={hello} id=\"hello-graphic\" alt=\"\" />\n        <h1 className=\"sr-only\">Hello.</h1>\n        <p>You caught me while I'm reworking my portfolio! In the meantime, reach me via one of the channels below:</p>\n        <ul className=\"flex-list\">\n          <li><a href=\"https://dribbble.com/taydunworth\" target=\"_blank\"><FontAwesomeIcon icon={faDribbble} /></a></li>\n          <li><a href=\"https://instagram.com/taylorintheteacups\" target=\"_blank\"><FontAwesomeIcon icon={faInstagram} /></a></li>\n          <li><a href=\"https://linkedin.com/in/taydunworth\" target=\"_blank\"><FontAwesomeIcon icon={faLinkedinIn} /></a></li>\n          <li><a href=\"https://github.com/taydunworth\" target=\"_blank\"><FontAwesomeIcon icon={faGithub} /></a></li>\n          <li><a href=\"mailto:taydunworth@gmail.com\"><FontAwesomeIcon icon={faEnvelope} /></a></li>\n        </ul>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5bf9f99a.svg\";","module.exports = __webpack_public_path__ + \"static/media/hello.77b069f5.svg\";"],"sourceRoot":""}